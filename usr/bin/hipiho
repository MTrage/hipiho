#!/usr/bin/python3

# This is free and unencumbered software released into the public domain.

#   Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.
#   In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#   For more information, please refer to <http://unlicense.org>
 
# have fun with this one,
# Marc-André Tragé (github.com/MTrage/hipiho)

import os, sys, subprocess, socket, requests, webbrowser
from pathlib import Path

config_path                    = "/.config/hipiho/" # configuration storage folder in the home folder
config_file                    = "default.config"   # name of the configuration file
pi_hole_ip_beg                 = "http://"          # should only be changed to "https://"" if this has also been installed in the pi-hole
pi_hole_ip_end                 = "/admin/api.php"   # standard php to api
pi_hole_auth                   = "?auth="           # authentification appendix for the API Raw Token
top_permitted_domains_number   = 10                 # option for API user – show top permitted domains (default: 10) 1 - 100

#  Script parts have been named in such a way that they should be self-explanatory on closer inspection due to their names.
#  If you still have questions, just ask °)

version                        = "1.5.1"

ping_ip                        = "8.8.8.8"
ping_port                      = 53

percent_blocked_space          = ""

reconfig_pi_hole_ip            = ""
reconfig_pi_hole_port          = ""
reconfig_pi_hole_border        = ""
reconfig_pi_hole_ILoveCandy    = ""
reconfig_pi_hole_Raw_API_Token = ""

run_level                      = 0
home_path                      = str(Path.home())
config                         = home_path + config_path + config_file

def check_if_exist_config_file():
    if not os.path.exists(config):
        print("Config file not found!")
        if os.path.exists(home_path + config_path):
            os.rmdir(home_path + config_path)

    if os.path.exists(home_path + config_path):
        if os.path.isfile(config):
            if os.stat(config).st_size == 0:
                os.remove(config)
                os.rmdir(home_path + config_path)
                print("Config file is empty. Please reconfigure!")

check_if_exist_config_file()

def bold(text):
    return "\033[1m{}\033[00m"  .format(text)

def alert(text):
    return "\033[41m{}\033[00m" .format(text)

def blue(text):
    return "\033[44m{}\033[00m" .format(text)

def cyan(text):
    return "\033[46m{}\033[00m" .format(text)

def yellow(text):
    return "\033[43m{}\033[00m" .format(text)

def white(text):
    return "\033[47m{}\033[00m" .format(text)

def text_blue(text):
    return "\033[34m{}\033[00m" .format(text)

def text_red(text):
    return "\033[31m{}\033[00m" .format(text)

def text_green(text):
    return "\033[32m{}\033[00m" .format(text)

def text_cyan(text):
    return "\033[36m{}\033[00m" .format(text)

def text_yellow(text):
    return "\033[33m{}\033[00m" .format(text)

def text_grey(text):
    return "\033[90m{}\033[00m" .format(text)

def text_black(text):
    return "\033[30m{}\033[00m" .format(text)

def ask_yes_or_no(question, default="yes"):
    valid = {"yes":True, "y":True, "no":False, "n":False}
    if default == None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)
    
    while True:
        sys.stdout.write(question + prompt)
        choice = input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]

def help_info():
    print("\n" + bold("HiPiHo") + " – a simple Pi-Hole CLI-Tool\n")
    print("  Usage: hipiho [" + bold("OPTION]"))
    print("    " + bold("-a\t--all\t\tall\t-A\t")            + "show all Pi-Hole data")
    print("    " + bold("-h\t--help\t\thelp\t-H\t")          + "this help message")
    print("    " + bold("-v\t--version\tversion\t-V\t")      + "version number")
    print("    " + bold("-n\t--new\t\tnew\t-N\t")            + "create a new config file")
    print("    " + bold("off\t--off\tdisable\tfalse\tOFF\t") + "disable Pi-Hole blocking")
    print("    " + bold("on\t--on\tenable\ttrue\tON\t")      + "enable Pi-Hole blocking\n")
    print("  For more information, visit github.com/MTrage/hipiho\n")
    exit()

def check_config(path):
    if os.path.exists(path):
        run_level = 1   
    else:
        os.mkdir(path)
        config = path + config_file
        file = open(config, "w")
        print("Please enter Pi-Hole WEB-Config Data...")
        
        if reconfig_pi_hole_ip  == "":
            pih_ip = "pi.hole"
            
        if reconfig_pi_hole_ip != "":
            pih_ip = reconfig_pi_hole_ip
            
        if reconfig_pi_hole_port != "":
            if(ask_yes_or_no("Is this the right IP/HOST: " + bold(reconfig_pi_hole_ip) + " ?", "yes") == True):
                pih_ip = reconfig_pi_hole_ip
            else:
                pih_ip = input(bold("... HTTP IP: "))
        else:
            pih_ip = input(bold("... HTTP IP: "))

        if reconfig_pi_hole_port == "":
            pih_port = "80"
            
        if reconfig_pi_hole_port != "":
            pih_port = reconfig_pi_hole_port
            
        if reconfig_pi_hole_port != "":
            if(ask_yes_or_no("Is this the right Port: " + bold(reconfig_pi_hole_port) + " ?", "yes") == True):
                pih_port = reconfig_pi_hole_port
            else:
                pih_port = input(bold("... HTTP Port: "))
        else:
            pih_port = input(bold("... HTTP Port: "))

        if reconfig_pi_hole_border  == "":
            pih_borders = ""
            
        if reconfig_pi_hole_border != "":
            pih_borders = reconfig_pi_hole_border
            
        if reconfig_pi_hole_border != "":
            if(ask_yes_or_no("Is show Borders " + bold(reconfig_pi_hole_border) + " the right choice?", "yes") == True):
                pih_borders = reconfig_pi_hole_border
            else:
                if(ask_yes_or_no(bold("... Borders: "), "yes") == True):
                    pih_borders = "yes"
                else:
                    pih_borders = "no"
        else:
            if(ask_yes_or_no(bold("... Borders: "), "yes") == True):
                pih_borders = "yes"
            else:
                pih_borders = "no"

        if reconfig_pi_hole_ILoveCandy  == "":
            pih_ILoveCandy = "no"
            
        if reconfig_pi_hole_ILoveCandy != "":
            pih_ILoveCandy = reconfig_pi_hole_ILoveCandy
            
        if reconfig_pi_hole_ILoveCandy != "":
            if(ask_yes_or_no("Is show Candy " + bold(reconfig_pi_hole_ILoveCandy) + " the right choice?", "yes") == True):
                pih_ILoveCandy = reconfig_pi_hole_ILoveCandy
            else:
                if(ask_yes_or_no(bold("... ILoveCandy: "), "yes") == True):
                    pih_ILoveCandy = "yes"
                else:
                    pih_ILoveCandy = "no"
        else:
            if(ask_yes_or_no(bold("... ILoveCandy: "), "yes") == True):
                pih_ILoveCandy = "yes"
            else:
                pih_ILoveCandy = "no"

        if reconfig_pi_hole_Raw_API_Token  == "":
            pih_Raw_API_Token = ""
            
        if reconfig_pi_hole_Raw_API_Token != "":
            pih_Raw_API_Token = reconfig_pi_hole_Raw_API_Token
            
        if reconfig_pi_hole_Raw_API_Token != "":
            if(ask_yes_or_no("Is this the right API Token: " + bold(reconfig_pi_hole_Raw_API_Token) + " ?", "yes") == True):
                pih_Raw_API_Token = reconfig_pi_hole_Raw_API_Token
            else:
                pih_Raw_API_Token = input(bold("... API Token: "))
        else:
            pih_Raw_API_Token = input(bold("... API Token: "))

        file.write("–––  HiPiHo Config File ––– Version:" + version + "\n")
        file.write("IP="            + pih_ip            + "\n")
        file.write("PORT="          + pih_port          + "\n")
        file.write("BORDERS="       + pih_borders       + "\n")
        file.write("ILOVECANDY="    + pih_ILoveCandy    + "\n")
        file.write("RAW_API_TOKEN=" + pih_Raw_API_Token + "\n")
        file.close()
        exit()

check_config(home_path + config_path)

file  = open(config, "r")
lines = file.readlines()
version_config_file            = lines[0].split(":")[1].rstrip()
pi_hole_ip                     = lines[1].split("=")[1].rstrip()
pi_hole_port                   = lines[2].split("=")[1].rstrip()
pi_hole_border                 = lines[3].split("=")[1].rstrip()
pi_hole_ILoveCandy             = lines[4].split("=")[1].rstrip()
pi_hole_Raw_API_Token          = lines[5].split("=")[1].rstrip()
file.close()

version_config_file            = version_config_file.replace(" ", "")

reconfig_pi_hole_ip            = pi_hole_ip
reconfig_pi_hole_port          = pi_hole_port
reconfig_pi_hole_border        = pi_hole_border
reconfig_pi_hole_ILoveCandy    = pi_hole_ILoveCandy
reconfig_pi_hole_Raw_API_Token = pi_hole_Raw_API_Token
pi_hole_API_auth               = pi_hole_auth + pi_hole_Raw_API_Token
pi_hole                        = pi_hole_ip_beg + pi_hole_ip + ":" + pi_hole_port + pi_hole_ip_end

def turn_pih(state):
    if pi_hole_Raw_API_Token == "":
        print("\n"+ bold("  !!! HiPiHo API ERROR !!!"))
        print("\n  To switch the Pi-Hole blocking on or off via HiPiHo, you must enter the Raw API Token! !!!\n")
        print("  You can get your \"Raw API Token\" by logging into the Pi-Hole, going to the menu item \"Settings\",")
        print("  then to the sub-item \"API / Web interface\" and selecting the button \"Show API Token\".\n")        
        print("  To enter a raw API token please call \n  Usage: " + bold("hipiho -n") + "\n  reconfigure the HiPiHo.\n")
        pih_web_admin = pi_hole_ip_beg + pi_hole_ip + ":" + pi_hole_port + "/admin"

        if ask_yes_or_no("  Do you want to open " + bold("Pi-Hole WEB-Admin") + " >>> " + pih_web_admin + " <<< ?", "yes") == True:
            webbrowser.open(pih_web_admin)
            
        print("")
        exit()
    else:        
        if state == "ON":
            r = requests.get(pi_hole + pi_hole_API_auth + "&enable")
            if r.status_code == 200:
                print("Pi-Hole blocking is now [ " + bold("ENABLED") + " ]")
                exit()
            else:
                print("Something went wrong, check your config file!")
        if state == "OFF":
            r = requests.get(pi_hole + pi_hole_API_auth + "&disable")
            if r.status_code == 200:
                print("Pi-Hole is now [ " + bold("DISABLED") + " ]")
                exit()
            else:
                print("Something went wrong, check your config file!")
            if r.status_code == 200:
                print("Pi-Hole is now " + bold("OFF") + "!")
                exit()
            else:
                print("Something went wrong, check your config file!")
                exit()
    exit()

def get_pihole_version():
    pi_hole_version = requests.get(pi_hole + '?versions').json()
    v = pi_hole_version
    print(bold("  Core current: ") + v['core_current'] + " " + bold("latest: ") + v['core_latest'])
    print(bold("   Web current: ") + v['web_current']  + " " + bold("latest: ") + v['web_latest'])
    print(bold("   FTL current: ") + v['FTL_current']  + " " + bold("latest: ") + v['FTL_latest'])

def check_args():
    if len(sys.argv) == 1:
        run_level = 3
    elif len(sys.argv) == 2 and sys.argv[1] != "":
        if sys.argv[1] == "on" or sys.argv[1] == "--on" or sys.argv[1] == "enable" or sys.argv[1] == "true" or sys.argv[1] == "ON":
            turn_pih("ON")
        if sys.argv[1] == "off" or sys.argv[1] == "--off" or sys.argv[1] == "disable" or sys.argv[1] == "false" or sys.argv[1] == "OFF":
            turn_pih("OFF")
        if sys.argv[1] == "-h" or sys.argv[1] == "--help" or sys.argv[1] == "help" or sys.argv[1] == "-H":
            help_info()
        if sys.argv[1] == "-v" or sys.argv[1] == "--version" or sys.argv[1] == "vesion" or sys.argv[1] == "-V":
            print(bold("HiPiHo Version: ") + version)
            if not version == version_config_file:    
                print(alert(bold("Config File Version " + version_config_file + " is not the same as the current HiPiHo Version " + version + "!")))
                print("Please call " + bold("hipiho -n") + " to reconfigure the HiPiHo.")
            if not pi_hole_Raw_API_Token == "":
                get_pihole_version()
            exit()
        elif sys.argv[1] == "-n" or sys.argv[1] == "--new" or sys.argv[1] == "new" or sys.argv[1] == "-N":
            print("Deleting old config...")
            os.remove(config)
            os.rmdir(home_path + config_path)
            check_config(home_path + config_path)
        else:
            help_info()

config_file_exist = os.path.exists(config)
if not config_file_exist:
    os.remove(config)
    os.rmdir(home_path + config_path)
    check_config(home_path + config_path)

if len(sys.argv) == 2 and sys.argv[1] != "":
    if sys.argv[1] != "-a" and sys.argv[1] != "--all" and sys.argv[1] != "all" and sys.argv[1] != "-A":
        check_args()

if not version == version_config_file:
    print(alert(bold("Config File Version " + version_config_file + " is not the same as the current HiPiHo Version " + version + "!")))
    print("Please call " + bold("hipiho -n") + " to reconfigure the HiPiHo.")
    exit()

def check_pihole():
    try:
        response = requests.get(pi_hole)
        if response.status_code == 200:
            run_level = 2
        else:
            print("Pi-Hole is not reachable")
            exit()
    except:
        if(ask_yes_or_no("Pi-Hole is not reachable!\nDo you want to create a new config?", "yes") == True):
            os.remove(config)
            os.rmdir(home_path + config_path)
            check_config(home_path + config_path)
        else:
            exit()
        exit()

check_pihole()

pi_hole_status               = requests.get(pi_hole + '?summaryRaw').json()
status                       = pi_hole_status['status']
domains_blocked              = pi_hole_status['domains_being_blocked']
dns_queries_today            = pi_hole_status['dns_queries_today']
gravity_last_updated_days    = pi_hole_status['gravity_last_updated']['relative']['days'] 
gravity_last_updated_hours   = pi_hole_status['gravity_last_updated']['relative']['hours']
gravity_last_updated_minutes = pi_hole_status['gravity_last_updated']['relative']['minutes']
unique_domains               = pi_hole_status['unique_domains']
queries_forwarded            = pi_hole_status['queries_forwarded']
queries_cached               = pi_hole_status['queries_cached']
clients_ever_seen            = pi_hole_status['clients_ever_seen']
unique_clients               = pi_hole_status['unique_clients']
dns_queries_all_types        = pi_hole_status['dns_queries_all_types']
reply_UNKNOWN                = pi_hole_status['reply_UNKNOWN']
reply_NODATA                 = pi_hole_status['reply_NODATA']
reply_NXDOMAIN               = pi_hole_status['reply_NXDOMAIN']
reply_CNAME                  = pi_hole_status['reply_CNAME']
reply_IP                     = pi_hole_status['reply_IP']
reply_DOMAIN                 = pi_hole_status['reply_DOMAIN']
reply_RRNAME                 = pi_hole_status['reply_RRNAME']
reply_SERVFAIL               = pi_hole_status['reply_SERVFAIL']
reply_REFUSED                = pi_hole_status['reply_REFUSED']
reply_NOTIMP                 = pi_hole_status['reply_NOTIMP']
reply_OTHER                  = pi_hole_status['reply_OTHER']
reply_DNSSEC                 = pi_hole_status['reply_DNSSEC']
reply_NONE                   = pi_hole_status['reply_NONE']
reply_BLOB                   = pi_hole_status['reply_BLOB']
dns_queries_all_replies      = pi_hole_status['dns_queries_all_replies']
privacy_level                = pi_hole_status['privacy_level']

space                        = ' '
space_line_border            = ''

border_space                 = ''
border_space_top_enabled     = ''
border_space_top_disabled    = '' 
border_space_bottom          = ''

if pi_hole_border            == "yes":
        border_space         = '    '

if pi_hole_border            == "yes":
        border_space_bottom  = '>>> '
else:
        border_space_bottom  = ''

if pi_hole_border == "yes":
        border_space_top_enabled  = '\033[44m–-––\033'
        border_space_top_disabled = '\033[41m–-––\033'
else:
    border_space_top_enabled      = '\033[44m\033'
    border_space_top_disabled     = '\033[41m\033'


if  pi_hole_ILoveCandy == "yes":
    if status   == 'enabled':
        status  = "\033[44m" + bold(" Pi-Hole ") + border_space_top_enabled  + '––––––––––––––––––––––––––– Status: [ ENABLED ] \033[00m'
    elif status == 'disabled':
        status  = "\033[41m" + bold(" Pi-Hole ") + border_space_top_disabled + '–––––––––––––––––––––––––– Status: [ DISABLED ] \033[00m'
else:
    if status   == 'enabled':
        status  = bold(" Pi-Hole ") + '_______________________________ Status: [ ENABLED ]'
    elif status == 'disabled':
        status  = bold(" Pi-Hole ") + '______________________________ Status: [ DISABLED ]'


def percent(num, total):
    return (num / total) * 100

ads_blocked_today     = pi_hole_status['ads_blocked_today']
percent_blocked       = pi_hole_status['ads_percentage_today']
percent_blocked_round = round(percent_blocked/2)
percent_bar_a         = percent_blocked_round*space
percent_bar_b         = (50 - percent_blocked_round)*space
percent_blocked_str   = str(int(percent_blocked))

def jump_bar(percent):
    return "Percent blocked:\t  " + "[%-25s] %d%%" % ('#'*int(percent/4), percent)

def get_main_ip():
    main_ip = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    main_ip.connect((ping_ip, ping_port))
    return main_ip.getsockname()[0]

def get_gateway_ip():
    gateway_ip = subprocess.check_output("ip route | grep default | cut -d ' ' -f 3", shell=True).decode('utf-8')
    return gateway_ip.rstrip()

def main():   
    global percent_blocked_space
    if run_level == 0:
        if pi_hole_border == "yes":
            print("")
            global space_line_border
            space_line_border = '––––'
            
        print(border_space + status)

              
        if  pi_hole_ILoveCandy == "yes":
            text = border_space + " " + bold(text_cyan("Network address:\t")) + text_yellow(" " + pi_hole_ip_beg + pi_hole_ip + ":" + pi_hole_port)
            print(text)
        else:
            print(border_space + " " + "Network address:\t" + "  " + pi_hole_ip_beg + pi_hole_ip + ":" + pi_hole_port)

        if not pi_hole_ILoveCandy == "yes":
            print(border_space + " " + jump_bar(percent_blocked))

        if  pi_hole_ILoveCandy == "yes":
            text = border_space + " " + bold(text_cyan("Domains blocked:\t")) + " " + text_red('{0:,}'.format(domains_blocked).replace(',','.'))
            print(text)
        else:
            print(border_space + " " + "Domains blocked:\t" + "  " +  '{0:,}'.format(domains_blocked).replace(',','.'))   

        if  pi_hole_ILoveCandy == "yes":                 
            text = border_space + " " + bold(text_cyan("Ads blocked:\t")) + " " + text_red('{0:,}'.format(ads_blocked_today).replace(',','.'))
            print(text)
        else:
            print(border_space + " " + "Ads blocked:\t  "  + "" +  '{0:,}'.format(ads_blocked_today).replace(',','.'))
               
        if  pi_hole_ILoveCandy == "yes":
            text = border_space + " " + bold(text_cyan("DNS queries today:\t")) + " " + text_red(dns_queries_today)
            print(text)
        else:
            print(border_space + " " + "DNS queries today:\t" + "  " + str(dns_queries_today))

        if len(sys.argv) == 2 and sys.argv[1] != "":
            if sys.argv[1] == "-a" or sys.argv[1] == "--all" or sys.argv[1] == "all" or sys.argv[1] == "-A":
                
                if  pi_hole_ILoveCandy == "yes":
                    text = border_space + " " + bold(text_cyan("Client IP:\t\t ")) + text_green(get_main_ip())
                    print(text)                    
                else: 
                    print(border_space + " " + "Client IP:\t\t  " + get_main_ip())
                    
                if  pi_hole_ILoveCandy == "yes":
                    text = border_space + " " + bold(text_cyan("Gateway:\t\t ")) + text_green(get_gateway_ip())
                    print(text)      
                else:   
                    print(border_space + " " + "Gateway:\t\t  " + get_gateway_ip())
                
                if  pi_hole_ILoveCandy == "yes":
                    print(border_space + bold(yellow(text_blue(" Extended information                                       "))))
                else:
                    print("\n" + border_space + bold(" Extended information"))

                if  pi_hole_ILoveCandy == "yes":
                    print(border_space + bold(text_blue(" Unique Domains            ")) + text_yellow(str(unique_domains))          + bold(text_blue("\t  Reply IP         ")) + text_yellow(str(reply_IP)))
                    print(border_space + bold(text_cyan(" Queries forwarded         ")) + text_yellow(str(queries_forwarded))       + bold(text_cyan("\t  Reply DOMAIN     ")) + text_yellow(str(reply_DOMAIN)))
                    print(border_space + bold(text_blue(" Queries cached            ")) + text_yellow(str(queries_cached))          + bold(text_blue("\t  Reply SERVFAIL   ")) + text_yellow(str(reply_SERVFAIL)))
                    print(border_space + bold(text_cyan(" Clients ever seen         ")) + text_yellow(str(clients_ever_seen))       + bold(text_cyan("\t  Reply RRNAME     ")) + text_yellow(str(reply_RRNAME)))
                    print(border_space + bold(text_blue(" Unique clients            ")) + text_yellow(str(unique_clients))          + bold(text_blue("\t  Reply REFUSED    ")) + text_yellow(str(reply_REFUSED)))
                    print(border_space + bold(text_cyan(" DNS queries all types     ")) + text_yellow(str(dns_queries_all_types))   + bold(text_cyan("\t  Reply NOTIMP     ")) + text_yellow(str(reply_NOTIMP)))
                    print(border_space + bold(text_blue(" DNS queries all replies   ")) + text_yellow(str(dns_queries_all_replies)) + bold(text_blue("\t  Reply OTHER      ")) + text_yellow(str(reply_OTHER)))
                    print(border_space + bold(text_cyan(" Reply UNKNOWN             ")) + text_yellow(str(reply_UNKNOWN))           + bold(text_cyan("\t  Reply DNSSEC     ")) + text_yellow(str(reply_DNSSEC)))
                    print(border_space + bold(text_blue(" Reply NODATA              ")) + text_yellow(str(reply_NODATA))            + bold(text_blue("\t  Reply NONE       ")) + text_yellow(str(reply_NONE)))
                    print(border_space + bold(text_cyan(" Reply NXDOMAIN            ")) + text_yellow(str(reply_NXDOMAIN))          + bold(text_cyan("\t  Reply BLOB       ")) + text_yellow(str(reply_BLOB)))
                    print(border_space + bold(text_blue(" Reply CNAME               ")) + text_yellow(str(reply_CNAME))             + bold(text_blue("\t  Privacy level    ")) + text_yellow(str(privacy_level)))

                else:
                    print(border_space + " Unique Domains            " + str(unique_domains)          + "\t  Reply IP         " + str(reply_IP))
                    print(border_space + " Queries forwarded         " + str(queries_forwarded)       + "\t  Reply DOMAIN     " + str(reply_DOMAIN))
                    print(border_space + " Queries cached            " + str(queries_cached)          + "\t  Reply SERVFAIL   " + str(reply_SERVFAIL))
                    print(border_space + " Clients ever seen         " + str(clients_ever_seen)       + "\t  Reply RRNAME     " + str(reply_RRNAME))
                    print(border_space + " Unique clients            " + str(unique_clients)          + "\t  Reply REFUSED    " + str(reply_REFUSED))
                    print(border_space + " DNS queries all types     " + str(dns_queries_all_types)   + "\t  Reply NOTIMP     " + str(reply_NOTIMP))
                    print(border_space + " DNS queries all replies   " + str(dns_queries_all_replies) + "\t  Reply OTHER      " + str(reply_OTHER))
                    print(border_space + " Reply UNKNOWN             " + str(reply_UNKNOWN)           + "\t  Reply DNSSEC     " + str(reply_DNSSEC))
                    print(border_space + " Reply NODATA              " + str(reply_NODATA)            + "\t  Reply NONE       " + str(reply_NONE))
                    print(border_space + " Reply NXDOMAIN            " + str(reply_NXDOMAIN)          + "\t  Reply BLOB       " + str(reply_BLOB))
                    print(border_space + " Reply CNAME               " + str(reply_CNAME)             + "\t  Privacy level    " + str(privacy_level))

                def top_permitted_domains(i):
                    
                    pi_hole_API_auth_ok = requests.get(pi_hole + pi_hole_API_auth + '&topItems=' + i ).json()
                    
                    if len(pi_hole_API_auth_ok) == 0:
                        print(bold(alert(" Advanced information cannot be displayed because the API key response is missing! ")))
                        print(bold( blue(" Is your API key correct?                                                          ")))
                        print(      blue(" You can use hipiho -n to disable API key checking or enter a new API key.         "))
                        exit()                   
                    
                    border = ""
                    
                    if pi_hole_border == "yes":
                        border        = border_space
                        
                    numbers_max_space = "41"
                    ispace            = numbers_max_space
                    top_domains       = requests.get(pi_hole + pi_hole_API_auth + '&topItems='   + i ).json()
                    top_domains       = top_domains['top_queries']
                    top_clients       = requests.get(pi_hole + pi_hole_API_auth + '&topClients=' + i ).json()
                    top_clients       = top_clients['top_sources']
                    top               = zip(top_domains, top_clients)
                    head_top_domains  = " Top Permitted Domains                   "
                    head_top_clients  = " Top Clients       "
                    head_space        = " " * (int(numbers_max_space) - int(len(head_top_domains)))
                    
                    if  pi_hole_ILoveCandy == "yes":
                        print(bold(border + blue(head_top_domains)) + head_space + bold(blue(head_top_clients)))
                    else:
                        print("\n" + bold(border + head_top_domains + head_space + head_top_clients))
                        
                    for domain, client in top:
                        ispace = int(ispace) - int(len(domain))
                        real_space    = ispace * " "
                        
                        if  pi_hole_ILoveCandy == "yes":
                            print(border  + " " + text_red(domain) + "" + real_space + text_green(client.replace("localhost|127.0.0.1","127.0.0.1")))
                        else:
                            print(border  + " " + domain + "" + real_space + client.replace("localhost|127.0.0.1","127.0.0.1"))
                        
                        ispace        = numbers_max_space
                    
                    pi_hole_API_data  = pi_hole + pi_hole_API_auth
                    API_data_topItems = requests.get(pi_hole_API_data + "&topItems").json()
                    
                    ### topItems == Top Permitted Domains  ???
                    #print(bold("Top Queries:"))
                    #for x in API_data_topItems['top_queries']:
                    #    print(x)
                   
                    if pi_hole_ILoveCandy == "yes":
                        print(bold(border + alert(" Top Advertisers                                        " + border)))
                    else:
                        print(bold("\n" + border + " Top Advertisers                                        " + border))
                    
                    i = 0
                    for x in API_data_topItems['top_ads']:
                        y = i
                        if len(str(i+1)) < 2:
                            y = str(int(1 + i))
                            y = "0" + y
                        else:
                            y = "10"
                        if  pi_hole_ILoveCandy == "yes":
                            if i % 2: 
                                print(border + text_yellow(" [" + y + "] ") + text_blue(x))
                            else:
                                print(border + text_yellow(" [" + y + "] ") + text_cyan(x))
                            i += 1
                        else:
                            print(border + " [" + y + "] " + x)
                    
                if not pi_hole_Raw_API_Token == "":
                    top_permitted_domains(str(top_permitted_domains_number))
                                    
        if len(percent_blocked_str) == 1:
            percent_blocked_space   = "  " 
        else:
            percent_blocked_space   = " "

        if pi_hole_ILoveCandy       == "yes":
            print(border_space + "\033[44m {}\033[00m" .format("\b " + border_space_bottom + percent_blocked_str + "%" + percent_blocked_space),"\033[43m {}\033[00m" .format("\b\b" + percent_bar_a),"\b\033[42m {}\033[00m" .format("" + percent_bar_b))


        if pi_hole_ILoveCandy       == "yes":
            print(text_grey(border_space + bold(" Last updated:") + "\t\t" + " " + str(gravity_last_updated_days) + text_grey(" day/s ") + str(gravity_last_updated_hours) + text_grey(" hour/s ") + str(gravity_last_updated_minutes) + text_grey(" minute/s")))
        else:
            print(border_space + bold(" Last updated:") + "\t\t" + " " + str(gravity_last_updated_days) + " day/s " + str(gravity_last_updated_hours) + " hour/s " + str(gravity_last_updated_minutes) + " minute/s")
        
        if pi_hole_border           == "yes":
            print("")
            
        int(percent_blocked)
        exit()
    else:
        check_pihole()

if __name__ == '__main__':
    main()
